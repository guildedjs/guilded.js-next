/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/channels/{channelId}/messages": {
    /**
     * Get channel messages
     * @description Results returned will be ordered ascending by the message's `createdAt`. `before` and `after` will filter based on the message's `createdAt`
     */
    get: operations["ChannelMessageReadMany"];
    /** Create a channel message */
    post: operations["ChannelMessageCreate"];
  };
  "/channels/{channelId}/messages/{messageId}": {
    /**
     * Get a channel message
     * @description Get details for a specific chat message from a chat channel.
     */
    get: operations["ChannelMessageRead"];
    /** Update a channel message */
    put: operations["ChannelMessageUpdate"];
    /** Delete a channel message */
    delete: operations["ChannelMessageDelete"];
  };
  "/channels/{channelId}/content/{contentId}/emotes/{emoteId}": {
    /**
     * [deprecated] Create reaction
     * @description [deprecated] Please use [this route](/docs/api/reactions/ChannelMessageReactionCreate) instead
     */
    put: operations["ContentReactionCreate"];
    /**
     * [deprecated] Delete reaction
     * @description [deprecated] Please use [this route](/docs/api/reactions/ChannelMessageReactionDelete) instead
     */
    delete: operations["ContentReactionDelete"];
  };
  "/groups/{groupId}/members/{userId}": {
    /** Add member to group */
    put: operations["GroupMembershipCreate"];
    /** Remove member from group */
    delete: operations["GroupMembershipDelete"];
  };
  "/servers/{serverId}/members/{userId}/xp": {
    /** Set a member's XP */
    put: operations["ServerXpForUserUpdate"];
    /** Award XP to a member */
    post: operations["ServerXpForUserCreate"];
  };
  "/servers/{serverId}/roles/{roleId}/xp": {
    /**
     * Award XP to role
     * @description Award XP to all members with a particular role.
     */
    post: operations["ServerXpForRoleCreate"];
  };
  "/servers/{serverId}/members/{userId}/roles/{roleId}": {
    /** Assign role to member */
    put: operations["RoleMembershipCreate"];
    /** Remove role from member */
    delete: operations["RoleMembershipDelete"];
  };
  "/servers/{serverId}/members/{userId}/roles": {
    /**
     * Get member roles
     * @description Get a list of the roles assigned to a member
     */
    get: operations["RoleMembershipReadMany"];
  };
  "/channels/{channelId}/topics": {
    /** Get forum topics */
    get: operations["ForumTopicReadMany"];
    /** Create a topic in a forum */
    post: operations["ForumTopicCreate"];
  };
  "/channels/{channelId}/topics/{forumTopicId}": {
    /** Get a forum topic */
    get: operations["ForumTopicRead"];
    /** Delete a forum topic */
    delete: operations["ForumTopicDelete"];
    /** Update a forum topic */
    patch: operations["ForumTopicUpdate"];
  };
  "/channels/{channelId}/topics/{forumTopicId}/pin": {
    /** Pin a forum topic */
    put: operations["ForumTopicPin"];
    /** Unpin a forum topic */
    delete: operations["ForumTopicUnpin"];
  };
  "/channels/{channelId}/topics/{forumTopicId}/emotes/{emoteId}": {
    /** Create forum topic reaction */
    put: operations["ForumTopicReactionCreate"];
    /** Delete forum topic reaction */
    delete: operations["ForumTopicReactionDelete"];
  };
  "/channels/{channelId}/topics/{forumTopicId}/lock": {
    /** Lock a forum topic */
    put: operations["ForumTopicLock"];
    /** Unlock a forum topic */
    delete: operations["ForumTopicUnlock"];
  };
  "/channels/{channelId}/topics/{forumTopicId}/comments": {
    /** Get a forum topic's comments */
    get: operations["ForumTopicCommentReadMany"];
    /** Create a forum topic comment */
    post: operations["ForumTopicCommentCreate"];
  };
  "/channels/{channelId}/topics/{forumTopicId}/comments/{forumTopicCommentId}": {
    /** Get a comment on a forum topic */
    get: operations["ForumTopicCommentRead"];
    /** Delete a forum topic comment */
    delete: operations["ForumTopicCommentDelete"];
    /** Update a forum topic comment */
    patch: operations["ForumTopicCommentUpdate"];
  };
  "/channels/{channelId}/items": {
    /** Get list items within a channel */
    get: operations["ListItemReadMany"];
    /** Create a list item */
    post: operations["ListItemCreate"];
  };
  "/channels/{channelId}/items/{listItemId}": {
    /** Get a list item */
    get: operations["ListItemRead"];
    /**
     * [deprecated] Update a list item
     * @description Deprecating this route in favor of the *patch* route
     */
    put: operations["ListItemUpdateDeprecated"];
    /** Delete a list item */
    delete: operations["ListItemDelete"];
    /** Update a list item */
    patch: operations["ListItemUpdate"];
  };
  "/channels/{channelId}/items/{listItemId}/complete": {
    /** Complete a list item */
    post: operations["ListItemCompleteCreate"];
    /** Uncomplete a list item */
    delete: operations["ListItemCompleteDelete"];
  };
  "/servers/{serverId}/members/{userId}/social-links/{socialLinkType}": {
    /** Retrieves a member's public social links */
    get: operations["MemberSocialLinkRead"];
  };
  "/servers/{serverId}/members/{userId}/nickname": {
    /** Update a member's nickname */
    put: operations["MemberNicknameUpdate"];
    /** Delete a member's nickname */
    delete: operations["MemberNicknameDelete"];
  };
  "/channels": {
    /**
     * Create a channel
     * @description Only server channels are supported at this time (coming soon™: DM Channels!)
     */
    post: operations["ChannelCreate"];
  };
  "/channels/{channelId}": {
    /**
     * Get a channel
     * @description Only server channels are supported at this time (coming soon™: DM Channels!)
     */
    get: operations["ChannelRead"];
    /**
     * Delete a channel
     * @description Only server channels are supported at this time (coming soon™: DM Channels!)
     */
    delete: operations["ChannelDelete"];
    /**
     * Update a channel
     * @description Only server channels are supported at this time (coming soon™: DM Channels!)
     */
    patch: operations["ChannelUpdate"];
  };
  "/channels/{channelId}/docs": {
    /**
     * Get docs
     * @description Results returned will be ordered descending by the doc's `updatedAt`. `before` will filter based on the doc's `updatedAt`
     */
    get: operations["DocReadMany"];
    /** Create a doc */
    post: operations["DocCreate"];
  };
  "/channels/{channelId}/docs/{docId}": {
    /** Get a doc */
    get: operations["DocRead"];
    /** Update a doc */
    put: operations["DocUpdate"];
    /** Delete a doc */
    delete: operations["DocDelete"];
  };
  "/servers/{serverId}/members/{userId}": {
    /** Get a server member */
    get: operations["ServerMemberRead"];
    /**
     * Kick a server member
     * @description This route can be used to leave servers by passing in your own user ID or `@me` for `userId`
     */
    delete: operations["ServerMemberDelete"];
  };
  "/servers/{serverId}/members": {
    /**
     * Get members of a server
     * @description Results returned will be ordered ascending by the member's `joinedAt`
     */
    get: operations["ServerMemberReadMany"];
  };
  "/servers/{serverId}/bans/{userId}": {
    /** Get a server ban */
    get: operations["ServerMemberBanRead"];
    /**
     * Create a server ban
     * @description Also known as banning a server member
     */
    post: operations["ServerMemberBanCreate"];
    /**
     * Delete a server ban
     * @description Also known as unbanning a server member
     */
    delete: operations["ServerMemberBanDelete"];
  };
  "/servers/{serverId}/bans": {
    /** Get server bans */
    get: operations["ServerMemberBanReadMany"];
  };
  "/servers/{serverId}/webhooks": {
    /**
     * Get a server's webhooks
     * @description Get a list of webhooks from a server.
     */
    get: operations["WebhookReadMany"];
    /** Create a webhook */
    post: operations["WebhookCreate"];
  };
  "/servers/{serverId}/webhooks/{webhookId}": {
    /** Get a server's webhook */
    get: operations["WebhookRead"];
    /** Update a webhook */
    put: operations["WebhookUpdate"];
    /** Delete a server webhook */
    delete: operations["WebhookDelete"];
  };
  "/servers/{serverId}": {
    /**
     * Get a server
     * @description Fetch various information about a given server. Currently, the bot must be a member of the server in order to fetch its information.
     */
    get: operations["ServerRead"];
  };
  "/channels/{channelId}/events": {
    /**
     * Get calendar events
     * @description Results returned will be ordered ascending by the event's `startsAt`. `before` and `after` will filter based on the event's `startsAt`
     */
    get: operations["CalendarEventReadMany"];
    /**
     * Create a calendar event
     * @description We currently do not have a way to surface the `repeatInfo` after event series are updated. Stay tuned!
     */
    post: operations["CalendarEventCreate"];
  };
  "/channels/{channelId}/events/{calendarEventId}": {
    /** Get a calendar event */
    get: operations["CalendarEventRead"];
    /** Delete a calendar event */
    delete: operations["CalendarEventDelete"];
    /**
     * Update a calendar event
     * @description We currently do not have a way to surface the `repeatInfo` after event series are updated. Stay tuned!
     */
    patch: operations["CalendarEventUpdate"];
  };
  "/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}": {
    /** Get a calendar event RSVP */
    get: operations["CalendarEventRsvpRead"];
    /** Create or update a calendar event RSVP */
    put: operations["CalendarEventRsvpUpdate"];
    /** Delete a calendar event RSVP */
    delete: operations["CalendarEventRsvpDelete"];
  };
  "/channels/{channelId}/events/{calendarEventId}/rsvps": {
    /** Get calendar event RSVPs */
    get: operations["CalendarEventRsvpReadMany"];
    /** Create or update a calendar event RSVP for multiple users */
    put: operations["CalendarEventRsvpUpdateMany"];
  };
  "/users/{userId}": {
    /**
     * Get a user
     * @description **Note** - at this time, you can only retrieve your own user
     */
    get: operations["UserRead"];
  };
  "/channels/{channelId}/topics/{forumTopicId}/comments/{forumTopicCommentId}/emotes/{emoteId}": {
    /** Create forum topic comment reaction */
    put: operations["ForumTopicCommentReactionCreate"];
    /** Delete forum topic comment reaction */
    delete: operations["ForumTopicCommentReactionDelete"];
  };
  "/channels/{channelId}/events/{calendarEventId}/comments": {
    /** Get a calendar event's comments */
    get: operations["CalendarEventCommentReadMany"];
    /** Create a comment on an event */
    post: operations["CalendarEventCommentCreate"];
  };
  "/channels/{channelId}/events/{calendarEventId}/comments/{calendarEventCommentId}": {
    /** Get a comment on the calendar event */
    get: operations["CalendarEventCommentRead"];
    /** Delete a calendar event comment */
    delete: operations["CalendarEventCommentDelete"];
    /** Update a calendar event comment */
    patch: operations["CalendarEventCommentUpdate"];
  };
  "/channels/{channelId}/events/{calendarEventId}/emotes/{emoteId}": {
    /** Create calendar event reaction */
    put: operations["CalendarEventReactionCreate"];
    /** Delete calendar event reaction */
    delete: operations["CalendarEventReactionDelete"];
  };
  "/channels/{channelId}/events/{calendarEventId}/comments/{calendarEventCommentId}/emotes/{emoteId}": {
    /** Create calendar event comment reaction */
    put: operations["CalendarEventCommentReactionCreate"];
    /** Delete calendar event comment reaction */
    delete: operations["CalendarEventCommentReactionDelete"];
  };
  "/channels/{channelId}/docs/{docId}/comments": {
    /** Get a doc's comments */
    get: operations["DocCommentReadMany"];
    /** Create a comment on a doc */
    post: operations["DocCommentCreate"];
  };
  "/channels/{channelId}/docs/{docId}/comments/{docCommentId}": {
    /** Get a comment on a doc */
    get: operations["DocCommentRead"];
    /** Delete a doc comment */
    delete: operations["DocCommentDelete"];
    /** Update a doc comment */
    patch: operations["DocCommentUpdate"];
  };
  "/channels/{channelId}/docs/{docId}/emotes/{emoteId}": {
    /** Create doc reaction */
    put: operations["DocReactionCreate"];
    /** Delete doc reaction */
    delete: operations["DocReactionDelete"];
  };
  "/channels/{channelId}/docs/{docId}/comments/{docCommentId}/emotes/{emoteId}": {
    /** Create doc comment reaction */
    put: operations["DocCommentReactionCreate"];
    /** Delete doc comment reaction */
    delete: operations["DocCommentReactionDelete"];
  };
  "/channels/{channelId}/event_series/{calendarEventSeriesId}": {
    /** Delete a calendar event series */
    delete: operations["CalendarEventSeriesDelete"];
    /** Update a calendar event series */
    patch: operations["CalendarEventSeriesUpdate"];
  };
  "/channels/{channelId}/announcements": {
    /**
     * Get announcements
     * @description Results returned will be ordered ascending by the announcement's `createdAt`. `before` will filter based on the announcement's `createdAt`
     */
    get: operations["AnnouncementReadMany"];
    /** Create an announcement */
    post: operations["AnnouncementCreate"];
  };
  "/channels/{channelId}/announcements/{announcementId}": {
    /** Read an announcement */
    get: operations["AnnouncementRead"];
    /** Delete an announcement */
    delete: operations["AnnouncementDelete"];
    /** Update an announcement */
    patch: operations["AnnouncementUpdate"];
  };
  "/users/{userId}/servers": {
    /**
     * Get a users servers
     * @description **Note** - at this time, you can only retrieve your own servers
     */
    get: operations["UserServerReadMany"];
  };
  "/channels/{channelId}/announcements/{announcementId}/emotes/{emoteId}": {
    /** Create announcement reaction */
    put: operations["AnnouncementReactionCreate"];
    /** Delete announcement reaction */
    delete: operations["AnnouncementReactionDelete"];
  };
  "/channels/{channelId}/announcements/{announcementId}/comments": {
    /** Get an announcement's comments */
    get: operations["AnnouncementCommentReadMany"];
    /** Create a comment on an announcement */
    post: operations["AnnouncementCommentCreate"];
  };
  "/channels/{channelId}/announcements/{announcementId}/comments/{announcementCommentId}": {
    /** Get a comment on the announcement */
    get: operations["AnnouncementCommentRead"];
    /** Delete an announcement comment */
    delete: operations["AnnouncementCommentDelete"];
    /** Update an announcement comment */
    patch: operations["AnnouncementCommentUpdate"];
  };
  "/channels/{channelId}/announcements/{announcementId}/comments/{announcementCommentId}/emotes/{emoteId}": {
    /** Create an announcement comment reaction */
    put: operations["AnnouncementCommentReactionCreate"];
    /** Delete an announcement comment reaction */
    delete: operations["AnnouncementCommentReactionDelete"];
  };
  "/channels/{channelId}/messages/{messageId}/emotes/{emoteId}": {
    /** Create a message reaction */
    put: operations["ChannelMessageReactionCreate"];
    /** Delete a message reaction */
    delete: operations["ChannelMessageReactionDelete"];
  };
  "/channels/{channelId}/messages/{messageId}/emotes": {
    /** Bulk delete a message's reactions */
    delete: operations["ChannelMessageReactionDeleteMany"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "id": "00000000-0000-0000-0000-000000000000",
     *   "type": "default",
     *   "serverId": "wlVr3Ggl",
     *   "groupId": "ZVzBo83p",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "content": "Hello **world**!",
     *   "embeds": [
     *     {
     *       "title": "embed title",
     *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
     *       "url": "https://www.guilded.gg",
     *       "color": 6118369,
     *       "timestamp": "2022-04-12T22:14:36.737Z",
     *       "footer": {
     *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
     *         "text": "footer text"
     *       },
     *       "thumbnail": {
     *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
     *       },
     *       "image": {
     *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
     *       },
     *       "author": {
     *         "name": "Gil",
     *         "url": "https://www.guilded.gg",
     *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
     *       },
     *       "fields": [
     *         {
     *           "name": "hello",
     *           "value": "these are fields"
     *         },
     *         {
     *           "name": "~~help i have been crossed out~~",
     *           "value": "~~oh noes~~",
     *           "inline": true
     *         },
     *         {
     *           "name": "another inline",
     *           "value": "field",
     *           "inline": true
     *         }
     *       ]
     *     }
     *   ],
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA"
     * }
     */
    ChatMessage: {
      /**
       * Message ID
       * Format: uuid
       * @description The ID of the message
       */
      id: string;
      /**
       * Type
       * @description The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated.
       * @enum {string}
       */
      type: "default" | "system";
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId?: string;
      /**
       * Group ID
       * @description The ID of the group
       */
      groupId?: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Content
       * Format: markdown
       * @description The content of the message
       */
      content?: string;
      embeds?: components["schemas"]["ChatEmbed"][];
      /** @description Message IDs that were replied to */
      replyMessageIds?: string[];
      /**
       * Is private
       * @description If set, this message will only be seen by those mentioned or replied to
       */
      isPrivate?: boolean;
      /**
       * Is silent
       * @description If set, this message did not notify mention or reply recipients
       * @default false
       */
      isSilent?: boolean;
      mentions?: components["schemas"]["Mentions"];
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the message was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this message (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      /**
       * Created by Webhook ID
       * @description The ID of the webhook who created this message, if it was created by a webhook
       */
      createdByWebhookId?: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the message was updated at, if relevant
       */
      updatedAt?: string;
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "messageId": "00000000-0000-0000-0000-000000000000"
     * }
     */
    ChatMessageReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /**
       * Message ID
       * Format: uuid
       * @description The ID of the message
       */
      messageId: string;
    };
    /**
     * @description Rich content sections optionally associated with chat messages. Properties with "webhook-markdown" support allow for the following: link, italic, bold, strikethrough, underline, inline code, block code, reaction, and mention.
     * @example {
     *   "title": "embed title",
     *   "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
     *   "url": "https://www.guilded.gg",
     *   "color": 6118369,
     *   "timestamp": "2022-04-12T22:14:36.737Z",
     *   "footer": {
     *     "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
     *     "text": "footer text"
     *   },
     *   "thumbnail": {
     *     "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
     *   },
     *   "image": {
     *     "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
     *   },
     *   "author": {
     *     "name": "Gil",
     *     "url": "https://www.guilded.gg",
     *     "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
     *   },
     *   "fields": [
     *     {
     *       "name": "hello",
     *       "value": "these are fields"
     *     },
     *     {
     *       "name": "~~help i have been crossed out~~",
     *       "value": "~~oh noes~~",
     *       "inline": true
     *     },
     *     {
     *       "name": "another inline",
     *       "value": "field",
     *       "inline": true
     *     }
     *   ]
     * }
     */
    ChatEmbed: {
      /**
       * Format: webhook-markdown
       * @description Main header of the embed
       */
      title?: string;
      /**
       * Format: webhook-markdown
       * @description Subtext of the embed
       */
      description?: string;
      /**
       * Format: uri
       * @description URL to linkify the `title` field with
       */
      url?: string;
      /** @description Decimal value of the color that the left border should be */
      color?: number;
      /** @description A small section at the bottom of the embed */
      footer?: {
        /**
         * Format: media-uri
         * @description URL of a small image to put in the footer
         */
        icon_url?: string;
        /** @description Text of the footer */
        text: string;
      };
      /**
       * Format: date-time
       * @description A timestamp to put in the footer
       */
      timestamp?: string;
      /** @description An image to the right of the embed's content */
      thumbnail?: {
        /**
         * Format: media-uri
         * @description URL of the image
         */
        url?: string;
      };
      /** @description The main picture to associate with the embed */
      image?: {
        /**
         * Format: media-uri
         * @description URL of the image
         */
        url?: string;
      };
      /** @description A small section above the title of the embed */
      author?: {
        /** @description Name of the author */
        name?: string;
        /**
         * Format: uri
         * @description URL to linkify the author's `name` field
         */
        url?: string;
        /**
         * Format: media-uri
         * @description URL of a small image to display to the left of the author's `name`
         */
        icon_url?: string;
      };
      /** @description Table-like cells to add to the embed */
      fields?: {
        /**
         * Format: webhook-markdown
         * @description Header of the table-like cell
         */
        name: string;
        /**
         * Format: webhook-markdown
         * @description Subtext of the table-like cell
         */
        value: string;
        /**
         * @description If the field should wrap or not
         * @default false
         */
        inline?: boolean;
      }[];
    };
    /**
     * @example {
     *   "type": "roblox",
     *   "userId": "Ann6LewA",
     *   "handle": "builderman",
     *   "serviceId": "156",
     *   "createdAt": "2006-03-08T20:15:00.706Z"
     * }
     */
    SocialLink: {
      /**
       * Social link type
       * @description The type of social link that Guilded supports. Depending on this value, `handle` or `serviceId` may or may not be present
       * @enum {string}
       */
      type:
        | "twitch"
        | "bnet"
        | "psn"
        | "xbox"
        | "steam"
        | "origin"
        | "youtube"
        | "twitter"
        | "facebook"
        | "switch"
        | "patreon"
        | "roblox"
        | "epic";
      /**
       * User ID
       * @description The ID of the user that the social link is associated with
       */
      userId: string;
      /** @description The handle of the user within the external service */
      handle?: string;
      /** @description The unique ID that represents this member's social link within the external service */
      serviceId?: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the social link was created at
       */
      createdAt: string;
    };
    /**
     * @description Metadata of who or what is mentioned in content
     * @example {
     *   "users": [
     *     {
     *       "id": "Ann6LewA"
     *     }
     *   ],
     *   "channels": [
     *     {
     *       "id": "00000000-0000-0000-0000-000000000000"
     *     }
     *   ],
     *   "roles": [
     *     {
     *       "id": 591232
     *     }
     *   ],
     *   "everyone": true,
     *   "here": true
     * }
     */
    Mentions: {
      /**
       * Users
       * @description Info on mentioned users
       */
      users?: {
        /**
         * User ID
         * @description The ID of the user
         */
        id: string;
      }[];
      /**
       * Channels
       * @description Info on mentioned channels
       */
      channels?: {
        /**
         * Channel ID
         * Format: uuid
         * @description The ID of the channel
         */
        id: string;
      }[];
      /**
       * Roles
       * @description Info on mentioned roles
       */
      roles?: {
        /**
         * Role ID
         * @description The ID of the role
         */
        id: number;
      }[];
      /**
       * Everyone
       * @description If @everyone was mentioned
       */
      everyone?: boolean;
      /**
       * Here
       * @description If @here was mentioned
       */
      here?: boolean;
    };
    /**
     * @example {
     *   "id": 1234567890,
     *   "content": "Great idea!",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "forumTopicId": 2036274747,
     *   "createdBy": "Ann6LewA"
     * }
     */
    ForumTopicComment: {
      /** @description The ID of the forum topic comment */
      id: number;
      /**
       * Content
       * Format: markdown
       * @description The content of the forum topic comment
       */
      content: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the forum topic comment was created at
       */
      createdAt: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the forum topic comment was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /** @description The ID of the forum topic */
      forumTopicId: number;
      /**
       * Created by
       * @description The ID of the user who created this forum topic comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      mentions?: components["schemas"]["Mentions"];
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "forumTopicId": 123456
     * }
     */
    ForumTopicReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /** @description The ID of the forum topic */
      forumTopicId: number;
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "forumTopicId": 123456,
     *   "forumTopicCommentId": 1234567890
     * }
     */
    ForumTopicCommentReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /** @description The ID of the forum topic */
      forumTopicId: number;
      /** @description The ID of the forum topic comment */
      forumTopicCommentId: number;
    };
    /**
     * @example {
     *   "id": 123456,
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "title": "Welcome new members!!",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA",
     *   "content": "Please introduce yourself in this topic!!!"
     * }
     */
    ForumTopic: {
      /** @description The ID of the forum topic */
      id: number;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Title
       * @description The title of the forum topic
       */
      title: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the forum topic was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this forum topic (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the forum topic was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Bumped at
       * Format: date-time
       * @description The ISO 8601 timestamp that the forum topic was bumped at. This timestamp is updated whenever there is any activity on the posts within the forum topic.
       */
      bumpedAt?: string;
      /**
       * Is pinned
       * @default false
       */
      isPinned?: boolean;
      /**
       * Is locked
       * @default false
       */
      isLocked?: boolean;
      /**
       * Content
       * Format: markdown
       * @description The content of the forum topic
       */
      content: string;
      mentions?: components["schemas"]["Mentions"];
    };
    /**
     * @example {
     *   "id": 123456,
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "title": "Welcome new members!!",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA"
     * }
     */
    ForumTopicSummary: {
      /** @description The ID of the forum topic */
      id: number;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Title
       * @description The title of the forum topic
       */
      title: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the forum topic was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this forum topic (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the forum topic was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Bumped at
       * Format: date-time
       * @description The ISO 8601 timestamp that the forum topic was bumped at. This timestamp is updated whenever there is any activity on the posts within the forum topic.
       */
      bumpedAt?: string;
      /**
       * Is pinned
       * @default false
       */
      isPinned?: boolean;
      /**
       * Is locked
       * @default false
       */
      isLocked?: boolean;
    };
    /**
     * @example {
     *   "id": "00000000-0000-0000-0000-000000000000",
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "message": "Remember to say hello **world**!",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA",
     *   "note": {
     *     "createdAt": "2021-06-15T20:15:00.706Z",
     *     "createdBy": "Ann6LewA",
     *     "content": "Duly noted"
     *   }
     * }
     */
    ListItem: {
      /**
       * Format: uuid
       * @description The ID of the list item
       */
      id: string;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Message
       * Format: markdown
       * @description The message of the list item
       */
      message: string;
      mentions?: components["schemas"]["Mentions"];
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the list item was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this list item (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      /**
       * Created by Webhook ID
       * @description The ID of the webhook who created this list item, if it was created by a webhook
       */
      createdByWebhookId?: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the list item was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Updated by
       * @description The ID of the user who updated this list item
       */
      updatedBy?: string;
      /**
       * Format: uuid
       * @description The ID of the parent list item if this list item is nested
       */
      parentListItemId?: string;
      /**
       * Completed at
       * Format: date-time
       * @description The ISO 8601 timestamp that the list item was completed at
       */
      completedAt?: string;
      /**
       * Completed by
       * @description The ID of the user who completed this list item
       */
      completedBy?: string;
      note?: {
        /**
         * Created at
         * Format: date-time
         * @description The ISO 8601 timestamp that the note was created at. If this field is populated, then there's a note associated with the list item
         */
        createdAt: string;
        /**
         * Created by
         * @description The ID of the user who created this note
         */
        createdBy: string;
        /**
         * Updated at
         * Format: date-time
         * @description The ISO 8601 timestamp that the note was updated at, if relevant
         */
        updatedAt?: string;
        /**
         * Updated by
         * @description The ID of the user who updated this note
         */
        updatedBy?: string;
        mentions?: components["schemas"]["Mentions"];
        /**
         * Note
         * Format: markdown
         * @description The note of the list item
         */
        content: string;
      };
    };
    /**
     * @example {
     *   "id": "00000000-0000-0000-0000-000000000000",
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "message": "Remember to say hello **world**!",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA",
     *   "note": {
     *     "createdAt": "2021-06-15T20:15:00.706Z",
     *     "createdBy": "Ann6LewA"
     *   }
     * }
     */
    ListItemSummary: {
      /**
       * Format: uuid
       * @description The ID of the list item
       */
      id: string;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Message
       * Format: markdown
       * @description The message of the list item
       */
      message: string;
      mentions?: components["schemas"]["Mentions"];
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the list item was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this list item (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      /**
       * Created by Webhook ID
       * @description The ID of the webhook who created this list item, if it was created by a webhook
       */
      createdByWebhookId?: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the list item was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Updated by
       * @description The ID of the user who updated this list item
       */
      updatedBy?: string;
      /**
       * Format: uuid
       * @description The ID of the parent list item if this list item is nested
       */
      parentListItemId?: string;
      /**
       * Completed at
       * Format: date-time
       * @description The ISO 8601 timestamp that the list item was completed at
       */
      completedAt?: string;
      /**
       * Completed by
       * @description The ID of the user who completed this list item
       */
      completedBy?: string;
      note?: {
        /**
         * Created at
         * Format: date-time
         * @description The ISO 8601 timestamp that the note was created at. If this field is populated, then there's a note associated with the list item
         */
        createdAt: string;
        /**
         * Created by
         * @description The ID of the user who created this note
         */
        createdBy: string;
        /**
         * Updated at
         * Format: date-time
         * @description The ISO 8601 timestamp that the note was updated at, if relevant
         */
        updatedAt?: string;
        /**
         * Updated by
         * @description The ID of the user who updated this note
         */
        updatedBy?: string;
      };
    };
    /**
     * @example {
     *   "id": 0,
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "title": "HOW-TO: Smoke These Meats with Sweet Baby Ray's",
     *   "content": "Spicy jalapeno bacon ipsum dolor amet sirloin ground round short loin, meatball brisket capicola tri-tip ham pork belly biltong corned beef chuck. Chicken ham brisket shank rump buffalo t-bone. Short loin sausage buffalo porchetta pork belly rump tri-tip frankfurter tail pork chop cow sirloin. Pancetta porchetta tail ball tip chislic beef ribs. Buffalo andouille leberkas jerky. Fatback shankle andouille beef. Cow kielbasa buffalo pork loin chislic meatloaf short loin rump meatball prosciutto.",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA",
     *   "updatedAt": "2021-07-15T22:20:00.706Z",
     *   "updatedBy": "Ann6LewA"
     * }
     */
    Doc: {
      /**
       * Doc ID
       * @description The ID of the doc
       */
      id: number;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Title
       * @description The title of the doc
       */
      title: string;
      /**
       * Content
       * Format: markdown
       * @description The content of the doc
       */
      content: string;
      mentions?: components["schemas"]["Mentions"];
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the doc was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this doc
       */
      createdBy: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the doc was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Updated by
       * @description The ID of the user who updated this doc
       */
      updatedBy?: string;
    };
    /**
     * @example {
     *   "id": 123456,
     *   "content": "Wow, cool document!!!",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "docId": 0,
     *   "createdBy": "Ann6LewA"
     * }
     */
    DocComment: {
      /**
       * Doc comment ID
       * @description The ID of the doc comment
       */
      id: number;
      /**
       * Content
       * Format: markdown
       * @description The content of the doc comment
       */
      content: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the doc comment was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this doc comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the doc comment was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Doc ID
       * @description The ID of the doc
       */
      docId: number;
      mentions?: components["schemas"]["Mentions"];
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "docId": 0
     * }
     */
    DocReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /**
       * Doc ID
       * @description The ID of the doc
       */
      docId: number;
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "docId": 0,
     *   "docCommentId": 123456
     * }
     */
    DocCommentReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /**
       * Doc ID
       * @description The ID of the doc
       */
      docId: number;
      /**
       * Doc comment ID
       * @description The ID of the doc comment
       */
      docCommentId: number;
    };
    /**
     * @example {
     *   "user": {
     *     "id": "Ann6LewA",
     *     "type": "user",
     *     "name": "Leopold Stotch",
     *     "createdAt": "2021-06-15T20:15:00.706Z"
     *   },
     *   "roleIds": [],
     *   "nickname": "Professor Chaos",
     *   "joinedAt": "2021-07-15T20:15:00.706Z"
     * }
     */
    ServerMember: {
      user: components["schemas"]["User"];
      /** Role IDs */
      roleIds: number[];
      /** Nickname */
      nickname?: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the member was created at
       */
      joinedAt: string;
      /**
       * Is owner
       * @default false
       */
      isOwner?: boolean;
    };
    /**
     * @example {
     *   "user": {
     *     "id": "Ann6LewA",
     *     "type": "user",
     *     "name": "Leopold Stotch"
     *   },
     *   "roleIds": []
     * }
     */
    ServerMemberSummary: {
      user: components["schemas"]["UserSummary"];
      /** Role IDs */
      roleIds: number[];
    };
    /**
     * @example {
     *   "id": "Ann6LewA",
     *   "type": "user",
     *   "name": "Leopold Stotch",
     *   "createdAt": "2021-06-15T20:15:00.706Z"
     * }
     */
    User: {
      /**
       * User ID
       * @description The ID of the user
       */
      id: string;
      /**
       * User type
       * @description The type of user. If this property is absent, it can assumed to be of type `user`
       * @enum {string}
       */
      type?: "bot" | "user";
      /**
       * User name
       * @description The user's name
       */
      name: string;
      /**
       * Avatar
       * Format: media-uri
       * @description The avatar image associated with the user
       */
      avatar?: string;
      /**
       * Banner
       * Format: media-uri
       * @description The banner image associated with the user
       */
      banner?: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the user was created at
       */
      createdAt: string;
    };
    /**
     * @example {
     *   "id": "Ann6LewA",
     *   "type": "user",
     *   "name": "Leopold Stotch"
     * }
     */
    UserSummary: {
      /**
       * User ID
       * @description The ID of the user
       */
      id: string;
      /**
       * User type
       * @description The type of user. If this property is absent, it can assumed to be of type `user`
       * @enum {string}
       */
      type?: "bot" | "user";
      /**
       * User name
       * @description The user's name
       */
      name: string;
      /**
       * Avatar
       * Format: media-uri
       * @description The avatar image associated with the user
       */
      avatar?: string;
    };
    /**
     * @example {
     *   "user": {
     *     "id": "Ann6LewA",
     *     "type": "user",
     *     "name": "Leopold Stotch"
     *   },
     *   "reason": "More toxic than a poison Pokémon",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA"
     * }
     */
    ServerMemberBan: {
      user: components["schemas"]["UserSummary"];
      /**
       * Reason
       * @description The reason for the ban as submitted by the banner
       */
      reason?: string;
      /**
       * Created by
       * @description The ID of the user who created this server member ban
       */
      createdBy: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the server member ban was created at
       */
      createdAt: string;
    };
    /**
     * @example {
     *   "id": "00000000-0000-0000-0000-000000000000",
     *   "type": "chat",
     *   "name": "The Dank Cellar",
     *   "topic": "Dank memes ONLY",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA",
     *   "serverId": "wlVr3Ggl",
     *   "groupId": "ZVzBo83p"
     * }
     */
    ServerChannel: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      id: string;
      /**
       * @description The type of channel. This will determine what routes to use for creating content in a channel. For example, if this "chat", then one must use the routes for creating channel messages
       * @enum {string}
       */
      type:
        | "announcements"
        | "chat"
        | "calendar"
        | "forums"
        | "media"
        | "docs"
        | "voice"
        | "list"
        | "scheduling"
        | "stream";
      /** @description The name of the channel */
      name: string;
      /** @description The topic of the channel */
      topic?: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the channel was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this channel
       */
      createdBy: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the channel was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description ID of the parent channel or parent thread, if present. Only relevant for server channels
       */
      parentId?: string;
      /** @description Only relevant for server channels */
      categoryId?: number;
      /**
       * Group ID
       * @description The ID of the group
       */
      groupId: string;
      /**
       * Is public
       * @description Whether the channel can be accessed from users who are not member of the server
       * @default false
       */
      isPublic?: boolean;
      /**
       * Archived by
       * @description The ID of the user who archived this channel
       */
      archivedBy?: string;
      /**
       * Archived at
       * Format: date-time
       * @description The ISO 8601 timestamp that the channel was archived at, if relevant
       */
      archivedAt?: string;
    };
    /**
     * @example {
     *   "id": "wlVr3Ggl",
     *   "type": "community",
     *   "name": "Guilded",
     *   "url": "Guilded-Official",
     *   "about": "The Official Guilded Server! For devs, friends, and fans alike!",
     *   "ownerId": "Ann6LewA",
     *   "createdAt": "2018-10-05T20:15:00.706Z",
     *   "isVerified": true,
     *   "timezone": "America/Los Angeles (PST/PDT)"
     * }
     */
    Server: {
      /**
       * Server ID
       * @description The ID of the server
       */
      id: string;
      /**
       * Created by
       * @description The ID of the user who created this server
       */
      ownerId: string;
      /**
       * Server type
       * @description The type of server designated from the server's settings page
       * @enum {string}
       */
      type?:
        | "team"
        | "organization"
        | "community"
        | "clan"
        | "guild"
        | "friends"
        | "streaming"
        | "other";
      /**
       * Server name
       * @description The name given to the server
       */
      name: string;
      /**
       * Server URL
       * @description The URL that the server can be accessible from. For example, a value of "Guilded-Official" means the server can be accessible from https://www.guilded.gg/Guilded-Official
       */
      url?: string;
      /**
       * Description
       * @description The description associated with the server
       */
      about?: string;
      /**
       * Avatar
       * Format: media-uri
       * @description The avatar image associated with the server
       */
      avatar?: string;
      /**
       * Banner
       * Format: media-uri
       * @description The banner image associated with the server
       */
      banner?: string;
      /**
       * Timezone
       * @description The timezone associated with the server
       */
      timezone?: string;
      /**
       * Is verified
       * @description The verified status of the server
       */
      isVerified?: boolean;
      /**
       * Channel ID
       * Format: uuid
       * @description The channel ID of the default channel of the server. This channel is defined as the first chat or voice channel in the left sidebar of a server in our UI. This channel is useful for sending welcome messages, though note that a bot may not have permissions to interact with this channel depending on how the server is configured.
       */
      defaultChannelId?: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the server was created at
       */
      createdAt: string;
    };
    /**
     * @example {
     *   "id": "00000000-0000-0000-0000-000000000000",
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "name": "E-102 Gamma",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA"
     * }
     */
    Webhook: {
      /**
       * Webhook ID
       * Format: uuid
       * @description The ID of the webhook
       */
      id: string;
      /**
       * Name
       * @description The name of the webhook
       */
      name: string;
      /**
       * Avatar
       * Format: media-uri
       * @description The avatar image associated with the webhook
       */
      avatar?: string;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the webhook was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this webhook
       */
      createdBy: string;
      /**
       * Deleted at
       * Format: date-time
       * @description The ISO 8601 timestamp that the webhook was deleted at
       */
      deletedAt?: string;
      /**
       * Token
       * @description The token of the webhook
       */
      token?: string;
    };
    /**
     * @example {
     *   "id": 1,
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "name": "Surprise LAN party for my wife 🤫",
     *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
     *   "location": "My house!",
     *   "url": "https://www.surprisepartygame.com/",
     *   "duration": 60,
     *   "color": 16106496,
     *   "startsAt": "2022-06-16T00:00:00.000Z",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA"
     * }
     */
    CalendarEvent: {
      /**
       * Calendar event ID
       * @description The ID of the calendar event
       */
      id: number;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Name
       * @description The name of the event
       */
      name: string;
      /**
       * Description
       * Format: markdown
       * @description The description of the event
       */
      description?: string;
      /**
       * Location
       * @description The location of the event
       */
      location?: string;
      /**
       * Format: uri
       * @description A URL to associate with the event
       */
      url?: string;
      /** @description The color of the event when viewing in the calendar */
      color?: number;
      /** @description Is this event a repeating event */
      repeats?: boolean;
      /**
       * Calendar event series ID
       * Format: uuid
       * @description The ID of the calendar event series. Only shows if the event is repeating
       */
      seriesId?: string;
      /**
       * Role IDs
       * @description The role IDs to restrict the event to
       */
      roleIds?: number[];
      /**
       * RSVP disabled
       * @description When disabled, users will not be able to RSVP to the event
       */
      rsvpDisabled?: boolean;
      /**
       * Is all day
       * @description Does the event last all day
       */
      isAllDay?: boolean;
      /** @description The number of RSVPs to allow before waitlisting RSVPs */
      rsvpLimit?: number;
      /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
      autofillWaitlist?: boolean;
      /**
       * Starts at
       * Format: date-time
       * @description The ISO 8601 timestamp that the event starts at
       */
      startsAt: string;
      /**
       * Duration
       * @description The duration of the event _**in minutes**_
       */
      duration?: number;
      /** Is private */
      isPrivate?: boolean;
      mentions?: components["schemas"]["Mentions"];
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the event was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this event
       */
      createdBy: string;
      cancellation?: {
        /**
         * Description
         * Format: markdown
         * @description The description of event cancellation
         */
        description?: string;
        /**
         * Created by
         * @description The ID of the user who created this event cancellation
         */
        createdBy: string;
      };
    };
    /**
     * @example {
     *   "id": 90000000,
     *   "name": "grinning",
     *   "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     * }
     */
    Emote: {
      /**
       * Emote ID
       * @description The ID of the emote
       */
      id: number;
      /**
       * Name
       * @description The name of the emote
       */
      name: string;
      /**
       * Emote URL
       * Format: media-uri
       * @description The URL of the emote image
       */
      url: string;
      /**
       * Server ID
       * @description The ID of the server the emote was created on
       */
      serverId?: string;
    };
    /**
     * @example {
     *   "calendarEventId": 1,
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "serverId": "wlVr3Ggl",
     *   "userId": "Ann6LewA",
     *   "status": "going",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA"
     * }
     */
    CalendarEventRsvp: {
      /**
       * Calendar event ID
       * @description The ID of the calendar event
       */
      calendarEventId: number;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * User ID
       * @description The ID of the user
       */
      userId: string;
      /**
       * Status
       * @description The status of the RSVP
       * @enum {string}
       */
      status:
        | "going"
        | "maybe"
        | "declined"
        | "invited"
        | "waitlisted"
        | "not responded";
      /**
       * Created by
       * @description The ID of the user who created this RSVP
       */
      createdBy: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the RSVP was created at
       */
      createdAt: string;
      /**
       * Updated by
       * @description The ID of the user who updated this RSVP
       */
      updatedBy?: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the RSVP was updated at, if relevant
       */
      updatedAt?: string;
    };
    /**
     * @example {
     *   "id": 1234567890,
     *   "content": "I will be there!!",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdAt": "2022-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA",
     *   "calendarEventId": 987654321
     * }
     */
    CalendarEventComment: {
      /**
       * Calendar event comment ID
       * @description The ID of the calendar event comment
       */
      id: number;
      /**
       * Content
       * Format: markdown
       * @description The content of the calendar event comment
       */
      content: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the calendar event comment was created at
       */
      createdAt: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the calendar event comment was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Calendar event ID
       * @description The ID of the calendar event
       */
      calendarEventId: number;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Created by
       * @description The ID of the user who created this calendar event comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      mentions?: components["schemas"]["Mentions"];
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "calendarEventId": 1
     * }
     */
    CalendarEventReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /**
       * Calendar event ID
       * @description The ID of the calendar event
       */
      calendarEventId: number;
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "calendarEventId": 1,
     *   "calendarEventCommentId": 1234567890
     * }
     */
    CalendarEventCommentReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /**
       * Calendar event ID
       * @description The ID of the calendar event
       */
      calendarEventId: number;
      /**
       * Calendar event comment ID
       * @description The ID of the calendar event comment
       */
      calendarEventCommentId: number;
    };
    /**
     * @example {
     *   "id": "00000000-0000-0000-0000-000000000000",
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000"
     * }
     */
    CalendarEventSeries: {
      /**
       * Calendar event series ID
       * Format: uuid
       * @description The ID of the calendar event series
       */
      id: string;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
    };
    /**
     * @example {
     *   "id": "9RVMoDZy",
     *   "serverId": "wlVr3Ggl",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdAt": "2021-06-15T20:15:00.706Z",
     *   "createdBy": "Ann6LewA",
     *   "title": "Pizza Party, don't be tardy!",
     *   "content": "Grab a slice, don't be slow, At our pizza party, it's the way to go! Toppings galore, cheesy delight, Come join us, it'll be out of sight!"
     * }
     */
    Announcement: {
      /**
       * Announcement ID
       * @description The ID of the announcement
       */
      id: string;
      /**
       * Server ID
       * @description The ID of the server
       */
      serverId: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the announcement was created at
       */
      createdAt: string;
      /**
       * Created by
       * @description The ID of the user who created this announcement
       */
      createdBy: string;
      /**
       * Content
       * Format: markdown
       * @description The content of the announcement
       */
      content: string;
      mentions?: components["schemas"]["Mentions"];
      /**
       * Title
       * @description The title of the announcement
       */
      title: string;
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "announcementId": "9RVMoDZy"
     * }
     */
    AnnouncementReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /**
       * Announcement ID
       * @description The ID of the announcement
       */
      announcementId: string;
    };
    /**
     * @example {
     *   "id": 123456,
     *   "content": "Now THAT is one awesome announcement!!!",
     *   "createdAt": "2023-04-07T16:19:00.000Z",
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "announcementId": "9RVMoDZy",
     *   "createdBy": "Ann6LewA"
     * }
     */
    AnnouncementComment: {
      /**
       * Announcement comment ID
       * @description The ID of the announcement comment
       */
      id: number;
      /**
       * Content
       * Format: markdown
       * @description The content of the announcement comment
       */
      content: string;
      /**
       * Created at
       * Format: date-time
       * @description The ISO 8601 timestamp that the announcement comment was created at
       */
      createdAt: string;
      /**
       * Updated at
       * Format: date-time
       * @description The ISO 8601 timestamp that the announcement comment was updated at, if relevant
       */
      updatedAt?: string;
      /**
       * Created by
       * @description The ID of the user who created this announcement comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
       */
      createdBy: string;
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * Announcement ID
       * @description The ID of the announcement
       */
      announcementId: string;
      mentions?: components["schemas"]["Mentions"];
    };
    /**
     * @example {
     *   "channelId": "00000000-0000-0000-0000-000000000000",
     *   "createdBy": "Ann6LewA",
     *   "emote": {
     *     "id": 90000000,
     *     "name": "grinning",
     *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
     *   },
     *   "announcementId": "9RVMoDZy",
     *   "announcementCommentId": 123456
     * }
     */
    AnnouncementCommentReaction: {
      /**
       * Channel ID
       * Format: uuid
       * @description The ID of the channel
       */
      channelId: string;
      /**
       * User ID
       * @description The ID of the user who added the reaction
       */
      createdBy: string;
      emote: components["schemas"]["Emote"];
      /**
       * Announcement ID
       * @description The ID of the announcement
       */
      announcementId: string;
      /**
       * Announcement comment ID
       * @description The ID of the announcement comment
       */
      announcementCommentId: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  /**
   * Get channel messages
   * @description Results returned will be ordered ascending by the message's `createdAt`. `before` and `after` will filter based on the message's `createdAt`
   */
  ChannelMessageReadMany: {
    parameters: {
      query: {
        /** @example 2021-06-15T20:15:00.706Z */
        before?: string;
        /**
         * @description An ISO 8601 timestamp that will be used to filter out results for the current page. Order will be reversed when compared to `before` or when omitting this parameter altogether
         * @example 2021-06-15T20:15:00.706Z
         */
        after?: string;
        /** @example 25 */
        limit?: number;
        /** @description Whether to include private messages between all users in response */
        includePrivate?: boolean;
      };
      path: {
        /**
         * @description ID of the channel that the messages exist in
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["ChatMessage"][];
          };
        };
      };
    };
  };
  /** Create a channel message */
  ChannelMessageCreate: {
    parameters: {
      path: {
        /**
         * @description Channel ID to create the message in
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Hello **world**!",
         *   "embeds": [
         *     {
         *       "title": "embed title",
         *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
         *       "url": "https://www.guilded.gg",
         *       "color": 6118369,
         *       "timestamp": "2022-04-12T22:14:36.737Z",
         *       "footer": {
         *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
         *         "text": "footer text"
         *       },
         *       "thumbnail": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
         *       },
         *       "image": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
         *       },
         *       "author": {
         *         "name": "Gil",
         *         "url": "https://www.guilded.gg",
         *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
         *       },
         *       "fields": [
         *         {
         *           "name": "hello",
         *           "value": "these are fields"
         *         },
         *         {
         *           "name": "~~help i have been crossed out~~",
         *           "value": "~~oh noes~~",
         *           "inline": true
         *         },
         *         {
         *           "name": "another inline",
         *           "value": "field",
         *           "inline": true
         *         }
         *       ]
         *     }
         *   ]
         * }
         */
        "application/json": {
          /**
           * Is private
           * @description If set, this message will only be seen by those mentioned or replied to
           */
          isPrivate?: boolean;
          /**
           * Is silent
           * @description If set, this message will not notify any mentioned users or roles
           * @default false
           */
          isSilent?: boolean;
          /** @description Message IDs to reply to */
          replyMessageIds?: string[];
          /**
           * Content
           * @description The content of the message
           */
          content?: Record<string, never> | string;
          /** @description At this time, only one embed is supported per message, and attachments are not supported. If you need to send more than one embed or upload attachments, consider creating the message via a webhook. */
          embeds?: components["schemas"]["ChatEmbed"][];
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            message: components["schemas"]["ChatMessage"];
          };
        };
      };
    };
  };
  /**
   * Get a channel message
   * @description Get details for a specific chat message from a chat channel.
   */
  ChannelMessageRead: {
    parameters: {
      path: {
        /**
         * @description ID of the channel that the message exists in
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        messageId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            message: components["schemas"]["ChatMessage"];
          };
        };
      };
    };
  };
  /** Update a channel message */
  ChannelMessageUpdate: {
    parameters: {
      path: {
        /**
         * @description ID of the channel that the message to be updated exists in
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        messageId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Hello **world**!",
         *   "embeds": [
         *     {
         *       "title": "embed title",
         *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
         *       "url": "https://www.guilded.gg",
         *       "color": 6118369,
         *       "timestamp": "2022-04-12T22:14:36.737Z",
         *       "footer": {
         *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
         *         "text": "footer text"
         *       },
         *       "thumbnail": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
         *       },
         *       "image": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
         *       },
         *       "author": {
         *         "name": "Gil",
         *         "url": "https://www.guilded.gg",
         *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
         *       },
         *       "fields": [
         *         {
         *           "name": "hello",
         *           "value": "these are fields"
         *         },
         *         {
         *           "name": "~~help i have been crossed out~~",
         *           "value": "~~oh noes~~",
         *           "inline": true
         *         },
         *         {
         *           "name": "another inline",
         *           "value": "field",
         *           "inline": true
         *         }
         *       ]
         *     }
         *   ]
         * }
         */
        "application/json": {
          /**
           * Content
           * @description The content of the message
           */
          content?: Record<string, never> | string;
          /** @description At this time, only one embed is supported per message, and attachments are not supported. If you need to send more than one embed or upload attachments, consider creating the message via a webhook. */
          embeds?: components["schemas"]["ChatEmbed"][];
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            message: WithRequired<
              {
                /**
                 * Message ID
                 * Format: uuid
                 * @description The ID of the message
                 */
                id?: string;
                /**
                 * Type
                 * @description The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated.
                 * @enum {string}
                 */
                type?: "default" | "system";
                /**
                 * Server ID
                 * @description The ID of the server
                 */
                serverId?: string;
                /**
                 * Group ID
                 * @description The ID of the group
                 */
                groupId?: string;
                /**
                 * Channel ID
                 * Format: uuid
                 * @description The ID of the channel
                 */
                channelId?: string;
                /**
                 * Content
                 * Format: markdown
                 * @description The content of the message
                 */
                content?: string;
                embeds?: components["schemas"]["ChatEmbed"][];
                /** @description Message IDs that were replied to */
                replyMessageIds?: string[];
                /**
                 * Is private
                 * @description If set, this message will only be seen by those mentioned or replied to
                 */
                isPrivate?: boolean;
                /**
                 * Is silent
                 * @description If set, this message did not notify mention or reply recipients
                 * @default false
                 */
                isSilent?: boolean;
                mentions?: components["schemas"]["Mentions"];
                /**
                 * Created at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the message was created at
                 */
                createdAt?: string;
                /**
                 * Created by
                 * @description The ID of the user who created this message (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
                 */
                createdBy?: string;
                /**
                 * Created by Webhook ID
                 * @description The ID of the webhook who created this message, if it was created by a webhook
                 */
                createdByWebhookId?: string;
                /**
                 * Updated at
                 * Format: date-time
                 * @description The ISO 8601 timestamp that the message was updated at, if relevant
                 */
                updatedAt: string;
              } & components["schemas"]["ChatMessage"],
              "updatedAt"
            >;
          };
        };
      };
    };
  };
  /** Delete a channel message */
  ChannelMessageDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        messageId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * [deprecated] Create reaction
   * @description [deprecated] Please use [this route](/docs/api/reactions/ChannelMessageReactionCreate) instead
   */
  ContentReactionCreate: {
    parameters: {
      path: {
        /**
         * @description Channel ID where the content exists
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        /**
         * @description Content ID of the content
         * @example 00000000-0000-0000-0000-000000000000
         */
        contentId: string;
        /**
         * @description Emote ID to apply
         * @example 90000000
         */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * [deprecated] Delete reaction
   * @description [deprecated] Please use [this route](/docs/api/reactions/ChannelMessageReactionDelete) instead
   */
  ContentReactionDelete: {
    parameters: {
      path: {
        /**
         * @description Channel ID where the content exists
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        /**
         * @description Content ID of the content
         * @example 00000000-0000-0000-0000-000000000000
         */
        contentId: string;
        /**
         * @description Emote ID to remove
         * @example 90000000
         */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Add member to group */
  GroupMembershipCreate: {
    parameters: {
      path: {
        /**
         * @description Group ID to add the member to
         * @example AAAAAAA
         */
        groupId: string;
        /**
         * @description Member ID to add to the group
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Remove member from group */
  GroupMembershipDelete: {
    parameters: {
      path: {
        /**
         * @description Group ID to remove the member from
         * @example AAAAAAA
         */
        groupId: string;
        /**
         * @description Member ID to remove from the group
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Set a member's XP */
  ServerXpForUserUpdate: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description Member ID to set XP to
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "total": 42
         * }
         */
        "application/json": {
          /** @description The total XP to set on the user */
          total: number;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /** @description The total XP after this operation */
            total: number;
          };
        };
      };
    };
  };
  /** Award XP to a member */
  ServerXpForUserCreate: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description Member ID to award XP to
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "amount": 42
         * }
         */
        "application/json": {
          /**
           * Amount
           * @description The amount of XP to award
           */
          amount: number;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /** @description The total XP after this operation */
            total: number;
          };
        };
      };
    };
  };
  /**
   * Award XP to role
   * @description Award XP to all members with a particular role.
   */
  ServerXpForRoleCreate: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description Role ID to award XP to
         * @example 1
         */
        roleId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "amount": 42
         * }
         */
        "application/json": {
          /**
           * Amount
           * @description The amount of XP to award
           */
          amount: number;
        };
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Assign role to member */
  RoleMembershipCreate: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description The ID of the member that the role should be assigned to
         * @example Ann6LewA
         */
        userId: string;
        /**
         * @description The role ID to apply to the user
         * @example 1
         */
        roleId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Remove role from member */
  RoleMembershipDelete: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description The ID of the member that the role should be removed from
         * @example Ann6LewA
         */
        userId: string;
        /**
         * @description The role ID to remove from the user
         * @example 1
         */
        roleId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * Get member roles
   * @description Get a list of the roles assigned to a member
   */
  RoleMembershipReadMany: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description The ID of the member to obtain roles from
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /**
             * Role IDs
             * @description The IDs of the roles that the member currently has
             */
            roleIds: number[];
          };
        };
      };
    };
  };
  /** Get forum topics */
  ForumTopicReadMany: {
    parameters: {
      query: {
        /** @example 2021-06-15T20:15:00.706Z */
        before?: string;
        /** @example 25 */
        limit?: number;
      };
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            forumTopics: components["schemas"]["ForumTopicSummary"][];
          };
        };
      };
    };
  };
  /** Create a topic in a forum */
  ForumTopicCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "title": "Welcome new members!!",
         *   "content": "Please introduce yourself in this topic!!!"
         * }
         */
        "application/json": {
          /**
           * Title
           * @description The title of the forum topic
           */
          title: string;
          /**
           * Content
           * @description The content of the forum topic
           */
          content: Record<string, never> | string;
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            forumTopic: components["schemas"]["ForumTopic"];
          };
        };
      };
    };
  };
  /** Get a forum topic */
  ForumTopicRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            forumTopic: components["schemas"]["ForumTopic"];
          };
        };
      };
    };
  };
  /** Delete a forum topic */
  ForumTopicDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Update a forum topic */
  ForumTopicUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "title": "Welcome new members!!",
         *   "content": "Please introduce yourself in this topic!!!"
         * }
         */
        "application/json": {
          /**
           * Title
           * @description The title of the forum topic
           */
          title?: string;
          /**
           * Content
           * Format: markdown
           * @description The content of the forum topic
           */
          content?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            forumTopic: components["schemas"]["ForumTopic"];
          };
        };
      };
    };
  };
  /** Pin a forum topic */
  ForumTopicPin: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Unpin a forum topic */
  ForumTopicUnpin: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Create forum topic reaction */
  ForumTopicReactionCreate: {
    parameters: {
      path: {
        /**
         * @description Channel ID where the forum topic exists
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        /** @description Forum Topic ID */
        forumTopicId: number;
        /**
         * @description Emote ID to apply
         * @example 90000000
         */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete forum topic reaction */
  ForumTopicReactionDelete: {
    parameters: {
      path: {
        /**
         * @description Channel ID where the forum topic exists
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        /** @description Forum Topic ID */
        forumTopicId: number;
        /**
         * @description Emote ID to remove
         * @example 90000000
         */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Lock a forum topic */
  ForumTopicLock: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Unlock a forum topic */
  ForumTopicUnlock: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Get a forum topic's comments */
  ForumTopicCommentReadMany: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            forumTopicComments: components["schemas"]["ForumTopicComment"][];
          };
        };
      };
    };
  };
  /** Create a forum topic comment */
  ForumTopicCommentCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Great idea!"
         * }
         */
        "application/json": {
          /**
           * Content
           * Format: markdown
           * @description The content of the forum topic comment
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            forumTopicComment: components["schemas"]["ForumTopicComment"];
          };
        };
      };
    };
  };
  /** Get a comment on a forum topic */
  ForumTopicCommentRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
        forumTopicCommentId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            forumTopicComment: components["schemas"]["ForumTopicComment"];
          };
        };
      };
    };
  };
  /** Delete a forum topic comment */
  ForumTopicCommentDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
        forumTopicCommentId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Update a forum topic comment */
  ForumTopicCommentUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        forumTopicId: number;
        forumTopicCommentId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Please introduce yourself in this topic!!!"
         * }
         */
        "application/json": {
          /**
           * Content
           * Format: markdown
           * @description The content of the forum topic
           */
          content?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            forumTopicComment: components["schemas"]["ForumTopicComment"];
          };
        };
      };
    };
  };
  /** Get list items within a channel */
  ListItemReadMany: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            listItems: components["schemas"]["ListItemSummary"][];
          };
        };
      };
    };
  };
  /** Create a list item */
  ListItemCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "message": "Create TODO list",
         *   "note": {
         *     "content": "I really need to stop putting this off"
         *   }
         * }
         */
        "application/json": {
          /**
           * Message
           * @description The message of the list item
           */
          message: string;
          note?: {
            /**
             * Note
             * @description The note of the list item
             */
            content: string;
          };
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            listItem: components["schemas"]["ListItem"];
          };
        };
      };
    };
  };
  /** Get a list item */
  ListItemRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        listItemId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            listItem: components["schemas"]["ListItem"];
          };
        };
      };
    };
  };
  /**
   * [deprecated] Update a list item
   * @description Deprecating this route in favor of the *patch* route
   */
  ListItemUpdateDeprecated: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        listItemId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "message": "Create TODO list",
         *   "note": {
         *     "content": "I really need to stop putting this off"
         *   }
         * }
         */
        "application/json": {
          /**
           * Message
           * Format: markdown
           * @description The message of the list item
           */
          message: string;
          note?: {
            /**
             * Note
             * Format: markdown
             * @description The note of the list item
             */
            content: string;
          } | null;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            listItem: components["schemas"]["ListItem"];
          };
        };
      };
    };
  };
  /** Delete a list item */
  ListItemDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        listItemId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Update a list item */
  ListItemUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        listItemId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "message": "Create TODO list",
         *   "note": {
         *     "content": "I really need to stop putting this off"
         *   }
         * }
         */
        "application/json": {
          /**
           * Message
           * Format: markdown
           * @description The message of the list item
           */
          message?: string;
          note?: {
            /**
             * Note
             * Format: markdown
             * @description The note of the list item
             */
            content: string;
          } | null;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            listItem: components["schemas"]["ListItem"];
          };
        };
      };
    };
  };
  /** Complete a list item */
  ListItemCompleteCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        listItemId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Uncomplete a list item */
  ListItemCompleteDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        listItemId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Retrieves a member's public social links */
  MemberSocialLinkRead: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /** @example Ann6LewA */
        userId: string;
        /** @description The type of social link to retrieve */
        socialLinkType:
          | "twitch"
          | "bnet"
          | "psn"
          | "xbox"
          | "steam"
          | "origin"
          | "youtube"
          | "twitter"
          | "facebook"
          | "switch"
          | "patreon"
          | "roblox"
          | "epic";
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            socialLink: components["schemas"]["SocialLink"];
          };
        };
      };
    };
  };
  /** Update a member's nickname */
  MemberNicknameUpdate: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description The ID of the user to update nickname for
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "nickname": "Professor Chaos"
         * }
         */
        "application/json": {
          /**
           * Nickname
           * @description The nickname to assign to the member
           */
          nickname: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /**
             * Nickname
             * @description The nickname that was assigned to the member
             */
            nickname: string;
          };
        };
      };
    };
  };
  /** Delete a member's nickname */
  MemberNicknameDelete: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description The ID of the user to remove nickname from
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * Create a channel
   * @description Only server channels are supported at this time (coming soon™: DM Channels!)
   */
  ChannelCreate: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "The Dank Cellar",
         *   "type": "chat"
         * }
         */
        "application/json": {
          /** @description The name of the channel */
          name: string;
          /** @description The topic of the channel */
          topic?: string;
          /**
           * Is public
           * @description Whether the channel can be accessed from users who are not member of the server
           * @default false
           */
          isPublic?: boolean;
          /**
           * @description The type of channel to create
           * @enum {string}
           */
          type:
            | "announcements"
            | "chat"
            | "calendar"
            | "forums"
            | "media"
            | "docs"
            | "voice"
            | "list"
            | "scheduling"
            | "stream";
          /**
           * Server ID
           * @description The server that the channel should be created in. Optional if providing a `groupId` or `categoryId`
           */
          serverId?: string;
          /**
           * Group ID
           * @description The group that the channel should be created in. If not provided, channel will be created in the "Server home" group from `serverId` _or_ in the group that corresponds to the `categoryId` parameter
           */
          groupId?: string;
          /** @description The category the channel should go in. If not provided, channel will be a top-level channel */
          categoryId?: number;
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            channel: components["schemas"]["ServerChannel"];
          };
        };
      };
    };
  };
  /**
   * Get a channel
   * @description Only server channels are supported at this time (coming soon™: DM Channels!)
   */
  ChannelRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            channel: components["schemas"]["ServerChannel"];
          };
        };
      };
    };
  };
  /**
   * Delete a channel
   * @description Only server channels are supported at this time (coming soon™: DM Channels!)
   */
  ChannelDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * Update a channel
   * @description Only server channels are supported at this time (coming soon™: DM Channels!)
   */
  ChannelUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "The Even Danker Cellar",
         *   "topic": "Only the dankest of memes please",
         *   "isPublic": true
         * }
         */
        "application/json": {
          /** @description The name of the channel or thread */
          name?: string;
          /** @description The topic of the channel. Not applicable to threads */
          topic?: string | null;
          /**
           * Is public
           * @description Whether the channel can be accessed from users who are not member of the server. Not applicable to threads
           */
          isPublic?: boolean;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            channel: components["schemas"]["ServerChannel"];
          };
        };
      };
    };
  };
  /**
   * Get docs
   * @description Results returned will be ordered descending by the doc's `updatedAt`. `before` will filter based on the doc's `updatedAt`
   */
  DocReadMany: {
    parameters: {
      query: {
        /** @example 2021-06-15T20:15:00.706Z */
        before?: string;
        /** @example 25 */
        limit?: number;
      };
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            docs: components["schemas"]["Doc"][];
          };
        };
      };
    };
  };
  /** Create a doc */
  DocCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "title": "HOW-TO: Smoke These Meats with Sweet Baby Ray's",
         *   "content": "Spicy jalapeno bacon ipsum dolor amet sirloin ground round short loin, meatball brisket capicola tri-tip ham pork belly biltong corned beef chuck. Chicken ham brisket shank rump buffalo t-bone. Short loin sausage buffalo porchetta pork belly rump tri-tip frankfurter tail pork chop cow sirloin. Pancetta porchetta tail ball tip chislic beef ribs. Buffalo andouille leberkas jerky. Fatback shankle andouille beef. Cow kielbasa buffalo pork loin chislic meatloaf short loin rump meatball prosciutto."
         * }
         */
        "application/json": {
          /**
           * Title
           * @description The title of the doc
           */
          title: string;
          /**
           * Content
           * @description The content of the doc
           */
          content: Record<string, never> | string;
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            doc: components["schemas"]["Doc"];
          };
        };
      };
    };
  };
  /** Get a doc */
  DocRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            doc: components["schemas"]["Doc"];
          };
        };
      };
    };
  };
  /** Update a doc */
  DocUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "title": "HOW-TO: Smoke These Meats with Sweet Baby Ray's",
         *   "content": "Spicy jalapeno bacon ipsum dolor amet sirloin ground round short loin, meatball brisket capicola tri-tip ham pork belly biltong corned beef chuck. Chicken ham brisket shank rump buffalo t-bone. Short loin sausage buffalo porchetta pork belly rump tri-tip frankfurter tail pork chop cow sirloin. Pancetta porchetta tail ball tip chislic beef ribs. Buffalo andouille leberkas jerky. Fatback shankle andouille beef. Cow kielbasa buffalo pork loin chislic meatloaf short loin rump meatball prosciutto."
         * }
         */
        "application/json": {
          /**
           * Title
           * @description The title of the doc
           */
          title: string;
          /**
           * Content
           * Format: markdown
           * @description The content of the doc
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            doc: components["schemas"]["Doc"];
          };
        };
      };
    };
  };
  /** Delete a doc */
  DocDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Get a server member */
  ServerMemberRead: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /** @example Ann6LewA */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            member: components["schemas"]["ServerMember"];
          };
        };
      };
    };
  };
  /**
   * Kick a server member
   * @description This route can be used to leave servers by passing in your own user ID or `@me` for `userId`
   */
  ServerMemberDelete: {
    parameters: {
      path: {
        /**
         * @description The ID of the server to kick the user from
         * @example wlVr3Ggl
         */
        serverId: string;
        /**
         * @description The ID of the user to kick. If the value provided here is your own user's ID, the request will attempt to make you leave the server
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * Get members of a server
   * @description Results returned will be ordered ascending by the member's `joinedAt`
   */
  ServerMemberReadMany: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            members: components["schemas"]["ServerMemberSummary"][];
          };
        };
      };
    };
  };
  /** Get a server ban */
  ServerMemberBanRead: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description The ID of the user to get a server ban for
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            serverMemberBan: components["schemas"]["ServerMemberBan"];
          };
        };
      };
    };
  };
  /**
   * Create a server ban
   * @description Also known as banning a server member
   */
  ServerMemberBanCreate: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description The ID of the user to ban from this server
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "reason": "More toxic than a poison Pokémon"
         * }
         */
        "application/json": {
          /**
           * Reason
           * @description The reason for the ban
           */
          reason?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            serverMemberBan: components["schemas"]["ServerMemberBan"];
          };
        };
      };
    };
  };
  /**
   * Delete a server ban
   * @description Also known as unbanning a server member
   */
  ServerMemberBanDelete: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /**
         * @description The ID of the user to unban from this server
         * @example Ann6LewA
         */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Get server bans */
  ServerMemberBanReadMany: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            serverMemberBans: components["schemas"]["ServerMemberBan"][];
          };
        };
      };
    };
  };
  /**
   * Get a server's webhooks
   * @description Get a list of webhooks from a server.
   */
  WebhookReadMany: {
    parameters: {
      query: {
        /**
         * @description ID of the channel you want to filter for webhooks
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
      };
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            webhooks: components["schemas"]["Webhook"][];
          };
        };
      };
    };
  };
  /** Create a webhook */
  WebhookCreate: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "Game patch webhook"
         * }
         */
        "application/json": {
          /**
           * Name
           * @description The name of the webhook
           */
          name: string;
          /**
           * Channel ID
           * Format: uuid
           * @description Channel ID to create the webhook in
           */
          channelId: string;
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            webhook: components["schemas"]["Webhook"];
          };
        };
      };
    };
  };
  /** Get a server's webhook */
  WebhookRead: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        webhookId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            webhook: components["schemas"]["Webhook"];
          };
        };
      };
    };
  };
  /** Update a webhook */
  WebhookUpdate: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        webhookId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "Better name webhook"
         * }
         */
        "application/json": {
          /**
           * Name
           * @description The name of the webhook
           */
          name: string;
          /**
           * Channel ID
           * Format: uuid
           * @description The ID of the channel
           */
          channelId?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            webhook: components["schemas"]["Webhook"];
          };
        };
      };
    };
  };
  /** Delete a server webhook */
  WebhookDelete: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        webhookId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * Get a server
   * @description Fetch various information about a given server. Currently, the bot must be a member of the server in order to fetch its information.
   */
  ServerRead: {
    parameters: {
      path: {
        /** @example wlVr3Ggl */
        serverId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            server: components["schemas"]["Server"];
          };
        };
      };
    };
  };
  /**
   * Get calendar events
   * @description Results returned will be ordered ascending by the event's `startsAt`. `before` and `after` will filter based on the event's `startsAt`
   */
  CalendarEventReadMany: {
    parameters: {
      query: {
        /** @example 2021-06-15T20:15:00.706Z */
        before?: string;
        /** @example 2021-06-15T20:15:00.706Z */
        after?: string;
        /** @example 25 */
        limit?: number;
      };
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEvents: components["schemas"]["CalendarEvent"][];
          };
        };
      };
    };
  };
  /**
   * Create a calendar event
   * @description We currently do not have a way to surface the `repeatInfo` after event series are updated. Stay tuned!
   */
  CalendarEventCreate: {
    parameters: {
      path: {
        /**
         * @description The calendar to create the event in
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "Surprise LAN party for my wife 🤫",
         *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
         *   "location": "My house!",
         *   "url": "https://www.surprisepartygame.com/",
         *   "color": 16106496,
         *   "startsAt": "2022-06-16T00:00:00.000Z",
         *   "duration": 60
         * }
         */
        "application/json": {
          /**
           * Name
           * @description The name of the event
           */
          name: string;
          /**
           * Description
           * Format: markdown
           * @description The description of the event
           */
          description?: string;
          /**
           * Location
           * @description The location of the event
           */
          location?: string;
          /**
           * Starts at
           * Format: date-time
           * @description The ISO 8601 timestamp that the event starts at
           */
          startsAt?: string;
          /**
           * Format: uri
           * @description A URL to associate with the event
           */
          url?: string;
          /** @description The color of the event when viewing in the calendar */
          color?: number;
          /**
           * Is all day
           * @description Does the event last all day? If passed with `duration`, `duration` will only be applied if it is an interval of minutes represented in days (e.g., `duration: 2880`)
           */
          isAllDay?: boolean;
          /**
           * RSVP disabled
           * @description When disabled, users will not be able to RSVP to the event
           */
          rsvpDisabled?: boolean;
          /** @description The number of RSVPs to allow before waitlisting RSVPs */
          rsvpLimit?: number;
          /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
          autofillWaitlist?: boolean;
          /**
           * Duration
           * @description The duration of the event _**in minutes**_
           */
          duration?: number;
          /** Is private */
          isPrivate?: boolean;
          /**
           * Role IDs
           * @description The role IDs to restrict the event to
           */
          roleIds?: number[];
          repeatInfo?: {
            /**
             * Repeat Type
             * @description How often you want your event to repeat (important note: this will repeat for the next 180 days unless custom is defined)
             * @default once
             * @enum {string}
             */
            type: "once" | "everyDay" | "everyWeek" | "everyMonth" | "custom";
            /** @description Apply further clarification to your events. This **must** have `type` set to `custom` */
            every?: {
              /**
               * Count
               * @description How often between your interval the event should repeat. For example, 1 would be every interval, 2 would be every second occurrence of the interval
               */
              count: number;
              /**
               * Interval
               * @description Coupled with `count`, this indicates the time range you are repeating your event over
               * @enum {string}
               */
              interval: "day" | "month" | "year" | "week";
            };
            /**
             * Occurrences
             * @description Used to control the end date of the event repeat (only used when `type` is `custom`; if used with `endDate`, the earliest resultant date of the two will be used)
             */
            endsAfterOccurrences?: number;
            /**
             * Ends at
             * Format: date-time
             * @description The ISO 8601 timestamp that the event ends at. Used to control the end date of the event repeat (only used when `type` is `custom`; if used with `endsAfterOccurrences`, the earliest resultant date of the two will be used)
             */
            endDate?: string;
            /** @description Used to control the day of the week that the event should repeat on (only used when `type` is `custom` and when `every.interval` is `week`) */
            on?: (
              | "sunday"
              | "monday"
              | "tuesday"
              | "wednesday"
              | "thursday"
              | "friday"
              | "saturday"
            )[];
          };
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEvent: components["schemas"]["CalendarEvent"];
          };
        };
      };
    };
  };
  /** Get a calendar event */
  CalendarEventRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEvent: components["schemas"]["CalendarEvent"];
          };
        };
      };
    };
  };
  /** Delete a calendar event */
  CalendarEventDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * Update a calendar event
   * @description We currently do not have a way to surface the `repeatInfo` after event series are updated. Stay tuned!
   */
  CalendarEventUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "Surprise LAN party for my wife 🤫",
         *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
         *   "location": "My house!",
         *   "url": "https://www.surprisepartygame.com/",
         *   "color": 16106496,
         *   "startsAt": "2022-06-16T00:00:00.000Z",
         *   "duration": 60
         * }
         */
        "application/json": {
          /**
           * Name
           * @description The name of the event
           */
          name?: string;
          /**
           * Description
           * Format: markdown
           * @description The description of the event
           */
          description?: string;
          /**
           * Location
           * @description The location of the event
           */
          location?: string;
          /**
           * Starts at
           * Format: date-time
           * @description The ISO 8601 timestamp that the event starts at
           */
          startsAt?: string;
          /**
           * Format: uri
           * @description A URL to associate with the event
           */
          url?: string;
          /** @description The color of the event when viewing in the calendar */
          color?: number;
          /**
           * Is all day
           * @description Does the event last all day? If passed with `duration`, `duration` will only be applied if it is an interval of minutes represented in days (e.g., `duration: 2880`)
           */
          isAllDay?: boolean;
          /**
           * RSVP disabled
           * @description When disabled, users will not be able to RSVP to the event
           */
          rsvpDisabled?: boolean;
          /** @description The number of RSVPs to allow before waitlisting RSVPs */
          rsvpLimit?: number;
          /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
          autofillWaitlist?: boolean;
          /**
           * Duration
           * @description The duration of the event _**in minutes**_
           */
          duration?: number;
          /** Is private */
          isPrivate?: boolean;
          /**
           * Role IDs
           * @description The role IDs to restrict the event to. Passing an empty array will clear the role IDs on the event
           */
          roleIds?: number[];
          cancellation?: {
            /**
             * Description
             * Format: markdown
             * @description The description of event cancellation
             */
            description?: string;
          };
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEvent: components["schemas"]["CalendarEvent"];
          };
        };
      };
    };
  };
  /** Get a calendar event RSVP */
  CalendarEventRsvpRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example Ann6LewA */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
          };
        };
      };
    };
  };
  /** Create or update a calendar event RSVP */
  CalendarEventRsvpUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example Ann6LewA */
        userId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "status": "going"
         * }
         */
        "application/json": {
          /**
           * Status
           * @description The status of the RSVP
           * @enum {string}
           */
          status: "going" | "maybe" | "declined" | "invited";
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
          };
        };
      };
    };
  };
  /** Delete a calendar event RSVP */
  CalendarEventRsvpDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example Ann6LewA */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Get calendar event RSVPs */
  CalendarEventRsvpReadMany: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEventRsvps: components["schemas"]["CalendarEventRsvp"][];
          };
        };
      };
    };
  };
  /** Create or update a calendar event RSVP for multiple users */
  CalendarEventRsvpUpdateMany: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** User IDs */
          userIds: string[];
          /**
           * Status
           * @description The status of the RSVP
           * @enum {string}
           */
          status: "going" | "maybe" | "declined" | "invited";
        };
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * Get a user
   * @description **Note** - at this time, you can only retrieve your own user
   */
  UserRead: {
    parameters: {
      path: {
        /** @example Ann6LewA */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            user: components["schemas"]["User"];
          };
        };
      };
    };
  };
  /** Create forum topic comment reaction */
  ForumTopicCommentReactionCreate: {
    parameters: {
      path: {
        /**
         * @description Channel ID where the forum topic exists
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        forumTopicId: number;
        forumTopicCommentId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete forum topic comment reaction */
  ForumTopicCommentReactionDelete: {
    parameters: {
      path: {
        /**
         * @description Channel ID where the forum topic exists
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        forumTopicId: number;
        forumTopicCommentId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Get a calendar event's comments */
  CalendarEventCommentReadMany: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEventComments: components["schemas"]["CalendarEventComment"][];
          };
        };
      };
    };
  };
  /** Create a comment on an event */
  CalendarEventCommentCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "I will be there!!"
         * }
         */
        "application/json": {
          /**
           * Content
           * Format: markdown
           * @description The content of the calendar event comment
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEventComment: components["schemas"]["CalendarEventComment"];
          };
        };
      };
    };
  };
  /** Get a comment on the calendar event */
  CalendarEventCommentRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example 1 */
        calendarEventCommentId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEventComment: components["schemas"]["CalendarEventComment"];
          };
        };
      };
    };
  };
  /** Delete a calendar event comment */
  CalendarEventCommentDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example 1 */
        calendarEventCommentId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Update a calendar event comment */
  CalendarEventCommentUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example 1 */
        calendarEventCommentId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "I will be there!!"
         * }
         */
        "application/json": {
          /**
           * Content
           * Format: markdown
           * @description The content of the calendar event comment
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            calendarEventComment: components["schemas"]["CalendarEventComment"];
          };
        };
      };
    };
  };
  /** Create calendar event reaction */
  CalendarEventReactionCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete calendar event reaction */
  CalendarEventReactionDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Create calendar event comment reaction */
  CalendarEventCommentReactionCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example 1 */
        calendarEventCommentId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete calendar event comment reaction */
  CalendarEventCommentReactionDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        calendarEventId: number;
        /** @example 1 */
        calendarEventCommentId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Get a doc's comments */
  DocCommentReadMany: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            docComments: components["schemas"]["DocComment"][];
          };
        };
      };
    };
  };
  /** Create a comment on a doc */
  DocCommentCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Wow, cool document!!!"
         * }
         */
        "application/json": {
          /**
           * Content
           * Format: markdown
           * @description The content of the doc comment
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Success */
      201: {
        content: {
          "application/json": {
            docComment: components["schemas"]["DocComment"];
          };
        };
      };
    };
  };
  /** Get a comment on a doc */
  DocCommentRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
        /** @example 1 */
        docCommentId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            docComment: components["schemas"]["DocComment"];
          };
        };
      };
    };
  };
  /** Delete a doc comment */
  DocCommentDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
        /** @example 1 */
        docCommentId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Update a doc comment */
  DocCommentUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
        /** @example 1 */
        docCommentId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Wow, cool document!!!"
         * }
         */
        "application/json": {
          /**
           * Content
           * Format: markdown
           * @description The content of the doc comment
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            docComment: components["schemas"]["DocComment"];
          };
        };
      };
    };
  };
  /** Create doc reaction */
  DocReactionCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete doc reaction */
  DocReactionDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Create doc comment reaction */
  DocCommentReactionCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
        /** @example 1 */
        docCommentId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete doc comment reaction */
  DocCommentReactionDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 1 */
        docId: number;
        /** @example 1 */
        docCommentId: number;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete a calendar event series */
  CalendarEventSeriesDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        calendarEventSeriesId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * Calendar event ID
           * @description Control the deletion of the series from the `calendarEventId` forward. If not defined, it will delete all events
           */
          calendarEventId?: number;
        };
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Update a calendar event series */
  CalendarEventSeriesUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        calendarEventSeriesId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "Surprise LAN party for my wife 🤫",
         *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
         *   "location": "My house!",
         *   "url": "https://www.surprisepartygame.com/",
         *   "color": 16106496,
         *   "startsAt": "2022-06-16T00:00:00.000Z",
         *   "duration": 60
         * }
         */
        "application/json": {
          /**
           * Name
           * @description The name of the event
           */
          name?: string;
          /**
           * Description
           * Format: markdown
           * @description The description of the event
           */
          description?: string;
          /**
           * Location
           * @description The location of the event
           */
          location?: string;
          /**
           * Starts at
           * Format: date-time
           * @description The ISO 8601 timestamp that the event starts at
           */
          startsAt?: string;
          /**
           * Format: uri
           * @description A URL to associate with the event
           */
          url?: string;
          /** @description The color of the event when viewing in the calendar */
          color?: number;
          /**
           * Is all day
           * @description Does the event last all day? If passed with `duration`, `duration` will only be applied if it is an interval of minutes represented in days (e.g., `duration: 2880`)
           */
          isAllDay?: boolean;
          /**
           * RSVP disabled
           * @description When disabled, users will not be able to RSVP to the event
           */
          rsvpDisabled?: boolean;
          /** @description The number of RSVPs to allow before waitlisting RSVPs */
          rsvpLimit?: number;
          /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
          autofillWaitlist?: boolean;
          /**
           * Duration
           * @description The duration of the event _**in minutes**_
           */
          duration?: number;
          /** Is private */
          isPrivate?: boolean;
          /**
           * Role IDs
           * @description The role IDs to restrict the event to. Passing an empty array will clear the role IDs on the event
           */
          roleIds?: number[];
          repeatInfo?: {
            /**
             * Repeat Type
             * @description How often you want your event to repeat (important note: this will repeat for the next 180 days unless custom is defined)
             * @default once
             * @enum {string}
             */
            type: "once" | "everyDay" | "everyWeek" | "everyMonth" | "custom";
            /** @description Apply further clarification to your events. This **must** have `type` set to `custom` */
            every?: {
              /**
               * Count
               * @description How often between your interval the event should repeat. For example, 1 would be every interval, 2 would be every second occurrence of the interval
               */
              count: number;
              /**
               * Interval
               * @description Coupled with `count`, this indicates the time range you are repeating your event over
               * @enum {string}
               */
              interval: "day" | "month" | "year" | "week";
            };
            /**
             * Occurrences
             * @description Used to control the end date of the event repeat (only used when `type` is `custom`; if used with `endDate`, the earliest resultant date of the two will be used)
             */
            endsAfterOccurrences?: number;
            /**
             * Ends at
             * Format: date-time
             * @description The ISO 8601 timestamp that the event ends at. Used to control the end date of the event repeat (only used when `type` is `custom`; if used with `endsAfterOccurrences`, the earliest resultant date of the two will be used)
             */
            endDate?: string;
            /** @description Used to control the day of the week that the event should repeat on (only used when `type` is `custom` and when `every.interval` is `week`) */
            on?: (
              | "sunday"
              | "monday"
              | "tuesday"
              | "wednesday"
              | "thursday"
              | "friday"
              | "saturday"
            )[];
          };
          /**
           * Calendar event ID
           * @description Control the updating of the series from the `calendarEventId` forward. If not defined, it will edit all events
           */
          calendarEventId?: number;
        };
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /**
   * Get announcements
   * @description Results returned will be ordered ascending by the announcement's `createdAt`. `before` will filter based on the announcement's `createdAt`
   */
  AnnouncementReadMany: {
    parameters: {
      query: {
        /** @example 2021-06-15T20:15:00.706Z */
        before?: string;
        /** @example 25 */
        limit?: number;
      };
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            announcements: components["schemas"]["Announcement"][];
          };
        };
      };
    };
  };
  /** Create an announcement */
  AnnouncementCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "title": "Pizza Party, don't be tardy!",
         *   "content": "Grab a slice, don't be slow, At our pizza party, it's the way to go! Toppings galore, cheesy delight, Come join us, it'll be out of sight!"
         * }
         */
        "application/json": {
          /**
           * Title
           * @description The title of the announcement
           */
          title: string;
          /**
           * Content
           * @description The content of the announcement
           */
          content: Record<string, never> | string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            announcement: components["schemas"]["Announcement"];
          };
        };
      };
    };
  };
  /** Read an announcement */
  AnnouncementRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            announcement: components["schemas"]["Announcement"];
          };
        };
      };
    };
  };
  /** Delete an announcement */
  AnnouncementDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Update an announcement */
  AnnouncementUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "title": "Pizza Party, don't be tardy!",
         *   "content": "Grab a slice, don't be slow, At our pizza party, it's the way to go! Toppings galore, cheesy delight, Come join us, it'll be out of sight!"
         * }
         */
        "application/json": {
          /**
           * Title
           * @description The title of the announcement
           */
          title?: string;
          /**
           * Content
           * @description The content of the announcement
           */
          content?: Record<string, never> | string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            announcement: components["schemas"]["Announcement"];
          };
        };
      };
    };
  };
  /**
   * Get a users servers
   * @description **Note** - at this time, you can only retrieve your own servers
   */
  UserServerReadMany: {
    parameters: {
      path: {
        /** @example Ann6LewA */
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            servers: components["schemas"]["Server"][];
          };
        };
      };
    };
  };
  /** Create announcement reaction */
  AnnouncementReactionCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
        /**
         * @description Emote ID to apply
         * @example 90000000
         */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete announcement reaction */
  AnnouncementReactionDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
        /**
         * @description Emote ID to apply
         * @example 90000000
         */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Get an announcement's comments */
  AnnouncementCommentReadMany: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            announcementComments: components["schemas"]["AnnouncementComment"][];
          };
        };
      };
    };
  };
  /** Create a comment on an announcement */
  AnnouncementCommentCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Now THAT is one awesome announcement!!!"
         * }
         */
        "application/json": {
          /**
           * Content
           * Format: markdown
           * @description The content of the announcement comment
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            announcementComment: components["schemas"]["AnnouncementComment"];
          };
        };
      };
    };
  };
  /** Get a comment on the announcement */
  AnnouncementCommentRead: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
        /** @example 1 */
        announcementCommentId: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            announcementComment: components["schemas"]["AnnouncementComment"];
          };
        };
      };
    };
  };
  /** Delete an announcement comment */
  AnnouncementCommentDelete: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
        /** @example 1 */
        announcementCommentId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Update an announcement comment */
  AnnouncementCommentUpdate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
        /** @example 1 */
        announcementCommentId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Now THAT is one awesome announcement!!!"
         * }
         */
        "application/json": {
          /**
           * Content
           * Format: markdown
           * @description The content of the announcement comment
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            announcementComment: components["schemas"]["AnnouncementComment"];
          };
        };
      };
    };
  };
  /** Create an announcement comment reaction */
  AnnouncementCommentReactionCreate: {
    parameters: {
      path: {
        /**
         * @description Channel ID where the announcement comment exists
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
        /** @example 1 */
        announcementCommentId: number;
        /**
         * @description Emote ID to apply
         * @example 90000000
         */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete an announcement comment reaction */
  AnnouncementCommentReactionDelete: {
    parameters: {
      path: {
        /**
         * @description Channel ID where the announcement comment exists
         * @example 00000000-0000-0000-0000-000000000000
         */
        channelId: string;
        /** @example AAAAAAA */
        announcementId: string;
        /** @example 1 */
        announcementCommentId: number;
        /**
         * @description Emote ID to apply
         * @example 90000000
         */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Create a message reaction */
  ChannelMessageReactionCreate: {
    parameters: {
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        messageId: string;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Delete a message reaction */
  ChannelMessageReactionDelete: {
    parameters: {
      query: {
        /** @example Ann6LewA */
        userId?: string;
      };
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        messageId: string;
        /** @example 90000000 */
        emoteId: number;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
  /** Bulk delete a message's reactions */
  ChannelMessageReactionDeleteMany: {
    parameters: {
      query: {
        /** @example 90000000 */
        emoteId?: number;
      };
      path: {
        /** @example 00000000-0000-0000-0000-000000000000 */
        channelId: string;
        /** @example 00000000-0000-0000-0000-000000000000 */
        messageId: string;
      };
    };
    responses: {
      /** @description Success */
      204: never;
    };
  };
}
